Adding two threads in queue: kernel.queue.queue_get_2threads
Allocate and free memory blocks from memory slab defined in previous tests (outside of module).: kernel.memory_slabs.mslab_alloc_free_thread
Allocate and free the memory blocks from memory slab: kernel.memory_slabs.mslab
Allocate memory blocks and check for alignment of 8 bytes.: kernel.memory_slabs.mslab_alloc_align
Cancel a delayed work from the system workq: kernel.workqueue.delayed_work_cancel_thread
Cancel a delayed work from the system workq in irq context: kernel.workqueue.delayed_work_cancel_isr
Cancel the work from the workq: kernel.workqueue.delayed_work_cancel_from_queue_thread
Cancel the work from the workq in irq context: kernel.workqueue.delayed_work_cancel_from_queue_isr
Check if the errno is updated in each thread's stack: kernel.errno.thread_context
Check the behavior of preemptive thread with busy_wait: kernel.threads.time_slicing_disable_preemptible
Check the behavior of preemptive threads when the time slice is disabled and enabled: kernel.threads.scheduling.slice_scheduling
Check the behavior of preemptive threads with different priorities: kernel.threads.scheduling.priority_scheduling
Check the parameters passed to thread entry function: kernel.threads.threads_spawn_params
Check the suspend and resume functionality in cooperative thread: kernel.threads.threads_suspend_resume_cooperative
Check the suspend and resume functionality in preemptive thread: kernel.threads.threads_suspend_resume_preemptible
Create a global variable and access it using ztest: kernel.xip.globals
Data passing test between two threads: kernel.queue.queue_thread2thread
Data passing test from thread to ISR: kernel.queue.queue_thread2isr
"Data passing test from\xC2\_ISR to thread": kernel.queue.queue_isr2threa
Define memory slab outside of module.: kernel.memory_slabs.mslab_kdefine_extern
Errno handling with newlib: kernel.errno.newlib.thread_context
ISR to Thread data passing: kernel.fifo.fifo_isr2thread
Initialize the memory slab using K_MEM_SLAB_DEFINE() and allocates/frees blocks.: kernel.memory_slabs.mslab_kdefine
Initialize the memory slab using k_mem_slab_init() and allocates/frees blocks.: kernel.memory_slabs.mslab_kinit
Lock the scheduler when preemptive threads are running: kernel.threads.scheduling.lock_preemptible
Monitor the acquire of semaphores by multiple threads: kernel.obj_tracing.tracing
Pass data by queue in loop: kernel.queue.queue_loop
Spawn thread with a delay: kernel.threads.threads_spawn_delay
Spawn thread with forever delay and highest priority: kernel.threads.threads_spawn_forever
Spawn thread with higher priority: kernel.threads.threads_spawn_priority
Submit a delayed work to the workq: kernel.workqueue.delayed_work_submit_to_queue_thread
Submit a delayed work to the workq in irq context: kernel.workqueue.delayed_work_submit_to_queue_isr
Test  exception handler executes properly: kernel.interrupt.static_idt1
Test FIFO Loop: kernel.fifo.fifo_loop
Test FIFO cancel wait: kernel.fifo.fifo_cancel_wait
Test FIFO get fail: kernel.fifo.fifo_get_fail
Test FIFO with empty ISR: kernel.fifo.fifo_is_empty_isr
Test FIFO with empty Thread: kernel.fifo.fifo_is_empty_thread
Test Timer init statically defined: kernel.timers.timer_k_define
Test Timer period with zero value: kernel.timers.timer_period_0
Test Timer status and timer remaining time before next expiry: kernel.timers.timer_status_get
Test Timer status randomly after certain duration: kernel.timers.timer_status_get_anytime
Test Timer thread synchronization: kernel.timers.timer_status_sync
Test Timer without any timer expiry callback function: kernel.timers.timer_expirefn_null
Test Zephyr kernel version: kernel.common.version
Test atomic services to read and modify 32-bit variables in an uninterruptible manner: kernel.common.atomic
Test bogus dynamic device name: kernel.device.bogus_dynamic_name
Test bogus dynamic device name with PM enabled: kernel.device.pm.bogus_dynamic_name
Test boot page table: kernel.memory_protection.boot_page_table
Test default isr alert: kernel.alert.isr_alert_default
Test delayed work in the system workq: kernel.workqueue.delayed_work_submit_thread
Test delayed work in the system workq in irq context: kernel.workqueue.delayed_work_submit_isr
Test device name: kernel.device.dynamic_name
Test dummy device driver: kernel.device.dummy_device
Test dummy device with PM enabled: kernel.device.pm.dummy_device
Test dummy device with power functions: kernel.device.pm.dummy_device_pm
Test duration and period of Timer: kernel.timers.timer_duration_period
Test dynamic name with power management enabled: kernel.device.pm.dynamic_name
? Test for performing load/store with high priority task and low priority task and
  test for performing pi calculation for high priority task and low priority task.
: kernel.fp_sharing.fp_sharing
Test installation of ISRs directly in the vector table: kernel.interrupt.arm_irq_vector_table
Test integer multiplication and divison for big numbers: kernel.common.intmath
Test interrupt handler executes properly: kernel.interrupt.static_idt
Test isr alert consumed: kernel.alert.isr_alert_consumed
Test isr alert ignore: kernel.alert.isr_alert_ignore
Test isr alert pending: kernel.alert.isr_alert_pending
Test isr kinit alert: kernel.alert.isr_kinit_alert
Test kernel debug feature (CONFIG_KERNEL_DEBUG): kernel.debug.kernel_debug
Test kernel offload workqueue: kernel.critical.kernel_critical
Test mem_swap() In-place memory swapping of buffer in reverse order: kernel.common.byteorder_mem_swap
Test memcpy_swap() swapping of one buffer content into another in reverse order: kernel.common.byteorder_memcpy_swap
Test monotonic timer: kernel.timers.timer_fn
Test mutex lock and unlock: kernel.mutex.mutex_lock_unlock
Test mutex priority inheritance: kernel.mutex.mutex
Test mutex reentry fails if trying to lock mutex before release: kernel.mutex.mutex_reent_lock_timeout_fail
Test mutex reentry passes if trying to lock mutex after release: kernel.mutex.mutex_reent_lock_timeout_pass
Test mutex reentry with lock forever: kernel.mutex.mutex_reent_lock_forever
Test mutex reentry with lock no wait: kernel.mutex.mutex_reent_lock_no_wait
Test preemptible threads pending on kernel objects: kernel.threads.scheduling.pending
Test printk and its variant with various format specifiers and sub-specifiers: kernel.common.printk
Test random number generation functionalities: kernel.common.rand32
Test semaphore between 2 threads: kernel.semaphore.sema_thread2thread
Test semaphore between thread and ISR: kernel.semaphore.sema_thread2isr
Test semaphore count: kernel.semaphore.sema_count_get
Test semaphore reset: kernel.semaphore.sema_reset
Test snprintf() functionality: libraries.libc.snprintf
Test sprintf with doubles: libraries.libc.sprintf_double
Test sprintf with strings: libraries.libc.sprintf_string
Test sprintf() with integers: libraries.libc.sprintf_integer
Test spurious interrupt handler executes properly: kernel.interrupt.static_idt2
Test standard type definitions library: libraries.libc.stdint
Test string operations library: libraries.libc.strncpy
Test system uptime and hardware clock time: kernel.common.clock_uptime
Test the allocation of memory blocks from memory slab with timeouts.: kernel.memory_slabs.mslab_alloc_timeout
Test the behaviour of CONFIG_RUNTIME_NMI at run time: kernel.interrupt.arm_runtime_nmi
Test the bitfield operations based on each architecture: kernel.common.bitfield
Test the correctness of irq_offload: kernel.interrupt.irq_offload
Test the gen_isr_table: kernel.interrupt.gen_isr_table
Test the position of interrupt stubs in IDT: kernel.interrupt.idt_stb
Test the priority of idle thread: kernel.threads.sys.systhreads_idle
Test the priority of main thread: kernel.threads.sys.systhreads_main
Test the sprintf() function with miscellaneous format specifiers: libraries.libc.sprintf_misc
Test thread alert consumed: kernel.alert.thread_alert_consumed
Test thread alert default: kernel.alert.thread_alert_default
Test thread alert ignore: kernel.alert.thread_alert_ignore
Test thread alert pending: kernel.alert.thread_alert_pending
Test thread custom data get/set from cooperative thread: kernel.threads.customdata_get_set_coop
Test thread custom data get/set from preemptive thread: kernel.threads.customdata_get_set_preempt
Test thread kinit alert: kernel.alert.thread_kinit_alert
Test thread timeout order: kernel.common.timeout_order
Test tickless slice: kernel.tickless.tickless_slice
Test tickless sysclock: kernel.tickless.tickless_sysclock
Test to check blocks belonging to different quad-block cannot be merged even though they are of same size.: kernel.memory_pool.mpool_alloc_merge_failed_diff_parent
Test to check the alignment of memory blocks allocated using k_malloc().: kernel.memory_heap.mheap_malloc_align4
? Test to check the allocation with NO_WAIT, TIMEOUT, and K_FOREVER. The test also
  validates free on memory blocks which are allocated from the memory pool.
: kernel.memory_pool.mem_pool
Test to check the behavior of alloc and free on memory pool in multiple threads of different priority scenario.: kernel.memory_pool.mpool_alloc_wait_prio
Test to check the behavior of alloc and free on memory pool in multiple threads of same priority scenario.: kernel.memory_pool.mpool_threadsafe
Test to check the behavior of allocation and free from memory slab on multiple threads of equal priority.: kernel.memory_slabs.mslab_threadsafe
? Test to check the behavior of allocation from memory slab when blocks are requested
  for allocation from multiple threads of different priority on same memory slab.
: kernel.memory_slabs.mslab_alloc_wait_prio
Test to demonstrate k_calloc() API functionality.: kernel.memory_heap.mheap_calloc
Test to demonstrate k_malloc() and k_free() API usage.: kernel.memory_heap.mheap_malloc_free
Test to demonstrate that blocks of different size in the memory pool cannot be merged.: kernel.memory_pool.mpool_alloc_merge_failed_diff_size
Test to obtain the number of used blocks from the memory slab.: kernel.memory_slabs.mslab_used_get
Test to validate alloc and free of blocks which are of different block sizes.: kernel.memory_pool.mpool_alloc_size_roundup
Test to validate alloc and free on mem_pool on IRQ context.: kernel.memory_pool.mpool_alloc_free_isr
Test to validate alloc and free on memory pool which is defined outside the module.: kernel.memory_pool.mpool_kdefine_extern
Test to validate how a mem_pool provides functionality to break a block into quarters.: kernel.memory_pool.mpool_alloc_size
Test to validate k_mem_pool_allocate and k_mem_pool_free() of different block sizes.: kernel.memory_pool.mpool_alloc_free_thread
Test user-specific data associated with timer: kernel.timers.timer_user_data
Test various doubly linked list functionalities: kernel.common.dlist
Test various singly-linked list functionalities: kernel.common.slist
Test vsnprintf() functionality: libraries.libc.vsnprintf
Test vsprintf() functionality: libraries.libc.vsprintf
The test basically analyses the stack memory used from the main thread: kernel.profiling.call_stacks_analyze_main
The test basically analyses the stack used from the idle thread: kernel.profiling.call_stacks_analyze_idle
The test basically analyses the stack used from the workq thread: kernel.profiling.call_stacks_analyze_workq
The test case to ensure heap minimum block size is 64 bytes.: kernel.memory_heap.mheap_min_block_size
The test checks for the fatal error conditions: kernel.fatal.fatal
The test submits the work to the system workq: kernel.workqueue.work_submit_thread
The test submits the work to the system workq in irq context: kernel.workqueue.work_submit_isr
The test submits the work to the workq: kernel.workqueue.work_submit_to_queue_thread
The test submits the work to the workq in irq context: kernel.workqueue.work_submit_to_queue_isr
The test valdiates init , submit, delayed submit, resubmit, delayed resubmit of works to the workq: kernel.workqueue.workq
This test starts the workq thread before submitting the work: kernel.workqueue.workq_start_before_submit
Thread to ISR data passing: kernel.fifo.fifo_thread2isr
Thread to thread data passing: kernel.fifo.poll.fifo_thread2thread
Validate K_THREAD_DEFINE by creating cooperative thread: kernel.threads.kdefine_coop_thread
Validate K_THREAD_DEFINE by creating preemptive thread: kernel.threads.kdefine_preempt_thread
Validate cooperative thread's delay option: kernel.threads.kinit_coop_thread
Validate k_sched_lock() and k_sched_unlock().: kernel.threads.unlock_preemptible
Validate k_thread_abort() when called by another thread.: kernel.threads.scheduling.threads_abort_others
Validate k_thread_abort() when called by current thread: kernel.threads.threads_abort_self
Validate k_thread_wakeup(): kernel.threads.scheduling.sleep_wakeup_preemptible
Validate preemptive thread behavior with time slice: kernel.threads.time_slicing_preemptible
Validate preemptive thread's delay option: kernel.threads.kinit_preempt_thread
Validate preemptiveness of preemptive thread: kernel.threads.scheduling.priority_preemptible
Validate recursive call of k_thread_abort(): kernel.threads.scheduling.threads_abort_repeat
Validate that the cooperative thread will not be preempted: kernel.threads.scheduling.priority_cooperative
Validate the behavior of cooperative thread when it sleeps: kernel.threads.scheduling.sleep_cooperative
Validate the behavior of cooperative thread when it yields: kernel.threads.yield_cooperative
Validate the correctness of k_is_preempt_thread() API: kernel.threads.scheduling.sched_is_preempt_thread
Validate the functionality of k_thread_cancel when the thread is already started: kernel.threads.threads_cancel_started
Validate the functionality of k_thread_cancel with delay: kernel.threads.threads_cancel_delayed
Validate the functionality of k_thread_cancel without delay: kernel.threads.threads_cancel_undelayed
checking the multilib: kernel.common.multilib
kernel.fifo.poll.fifo_cancel_wait: kernel.fifo.poll.fifo_cancel_wait
kernel.fifo.poll.fifo_get_fail: kernel.fifo.poll.fifo_get_fail
kernel.fifo.poll.fifo_is_empty_isr: kernel.fifo.poll.fifo_is_empty_isr
kernel.fifo.poll.fifo_is_empty_thread: kernel.fifo.poll.fifo_is_empty_thread
kernel.fifo.poll.fifo_isr2thread: kernel.fifo.poll.fifo_isr2thread
kernel.fifo.poll.fifo_loop: kernel.fifo.poll.fifo_loop
kernel.fifo.poll.fifo_thread2isr: kernel.fifo.poll.fifo_thread2isr
kernel.lifo.lifo_get_fail: kernel.lifo.lifo_get_fail
kernel.lifo.lifo_isr2thread: kernel.lifo.lifo_isr2thread
kernel.lifo.lifo_loop: kernel.lifo.lifo_loop
kernel.lifo.lifo_thread2isr: kernel.lifo.lifo_thread2isr
kernel.lifo.lifo_thread2thread: kernel.lifo.lifo_thread2thread
kernel.mailbox.mbox_async_put_get_block: kernel.mailbox.mbox_async_put_get_block
kernel.mailbox.mbox_async_put_get_buffer: kernel.mailbox.mbox_async_put_get_buffer
kernel.mailbox.mbox_kdefine: kernel.mailbox.mbox_kdefine
kernel.mailbox.mbox_kinit: kernel.mailbox.mbox_kinit
kernel.mailbox.mbox_put_get_buffer: kernel.mailbox.mbox_put_get_buffer
kernel.mailbox.mbox_put_get_null: kernel.mailbox.mbox_put_get_null
kernel.mailbox.mbox_target_source_thread_block: kernel.mailbox.mbox_target_source_thread_block
kernel.mailbox.mbox_target_source_thread_buffer: kernel.mailbox.mbox_target_source_thread_buffer
kernel.memory_heap.mheap_block_desc: kernel.memory_heap.mheap_block_desc
kernel.memory_pool.pool_block_get: kernel.memory_pool.pool_block_get
kernel.memory_pool.pool_block_get_timeout: kernel.memory_pool.pool_block_get_timeout
kernel.memory_pool.pool_block_get_wait: kernel.memory_pool.pool_block_get_wait
kernel.memory_pool.pool_malloc: kernel.memory_pool.pool_malloc
kernel.memory_protection.app_memory.app_memory: kernel.memory_protection.app_memory.app_memory
kernel.memory_protection.mmu.buffer_readable_read: kernel.memory_protection.mmu.buffer_readable_read
kernel.memory_protection.mmu.buffer_readable_write: kernel.memory_protection.mmu.buffer_readable_write
kernel.memory_protection.mmu.buffer_rw_read: kernel.memory_protection.mmu.buffer_rw_read
kernel.memory_protection.mmu.buffer_supervisor_rw: kernel.memory_protection.mmu.buffer_supervisor_rw
kernel.memory_protection.mmu.buffer_supervisor_w: kernel.memory_protection.mmu.buffer_supervisor_w
kernel.memory_protection.mmu.buffer_user_rw_supervisor: kernel.memory_protection.mmu.buffer_user_rw_supervisor
kernel.memory_protection.mmu.buffer_user_rw_user: kernel.memory_protection.mmu.buffer_user_rw_user
kernel.memory_protection.mmu.buffer_writeable_write: kernel.memory_protection.mmu.buffer_writeable_write
kernel.memory_protection.mmu.multi_page_buffer_read: kernel.memory_protection.mmu.multi_page_buffer_read
kernel.memory_protection.mmu.multi_page_buffer_read_user: kernel.memory_protection.mmu.multi_page_buffer_read_user
kernel.memory_protection.mmu.multi_page_buffer_user: kernel.memory_protection.mmu.multi_page_buffer_user
kernel.memory_protection.mmu.multi_page_buffer_write_user: kernel.memory_protection.mmu.multi_page_buffer_write_user
kernel.memory_protection.mmu.multi_pde_buffer_readable_read: kernel.memory_protection.mmu.multi_pde_buffer_readable_read
kernel.memory_protection.mmu.multi_pde_buffer_readable_write: kernel.memory_protection.mmu.multi_pde_buffer_readable_write
kernel.memory_protection.mmu.multi_pde_buffer_rw: kernel.memory_protection.mmu.multi_pde_buffer_rw
kernel.memory_protection.mmu.multi_pde_buffer_writeable_write: kernel.memory_protection.mmu.multi_pde_buffer_writeable_write
kernel.memory_protection.obj_validation.generic_object: kernel.memory_protection.obj_validation.generic_object
kernel.message_queue.msgq_get_fail: kernel.message_queue.msgq_get_fail
kernel.message_queue.msgq_isr: kernel.message_queue.msgq_isr
kernel.message_queue.msgq_purge_when_put: kernel.message_queue.msgq_purge_when_put
kernel.message_queue.msgq_put_fail: kernel.message_queue.msgq_put_fail
kernel.message_queue.msgq_thread: kernel.message_queue.msgq_thread
kernel.pipe.pipe_block_put: kernel.pipe.pipe_block_put
kernel.pipe.pipe_block_put_sema: kernel.pipe.pipe_block_put_sema
kernel.pipe.pipe_get_fail: kernel.pipe.pipe_get_fail
kernel.pipe.pipe_put_fail: kernel.pipe.pipe_put_fail
kernel.pipe.pipe_thread2thread: kernel.pipe.pipe_thread2thread
kernel.queue.poll.queue_get_2threads: kernel.queue.poll.queue_get_2threads
kernel.queue.poll.queue_get_fail: kernel.queue.poll.queue_get_fail
kernel.queue.poll.queue_isr2thread: kernel.queue.poll.queue_isr2thread
kernel.queue.poll.queue_loop: kernel.queue.poll.queue_loop
kernel.queue.poll.queue_thread2isr: kernel.queue.poll.queue_thread2isr
kernel.queue.poll.queue_thread2thread: kernel.queue.poll.queue_thread2thread
kernel.stack_api.stack_pop_fail: kernel.stack_api.stack_pop_fail
kernel.stack_api.stack_thread2isr: kernel.stack_api.stack_thread2isr
kernel.stack_api.stack_thread2thread: kernel.stack_api.stack_thread2thread
kernel.threads.scheduling.time_slicing_disable_preemptible: kernel.threads.scheduling.time_slicing_disable_preemptible
kernel.threads.scheduling.time_slicing_preemptible: kernel.threads.scheduling.time_slicing_preemptible
kernel.threads.scheduling.unlock_preemptible: kernel.threads.scheduling.unlock_preemptible
kernel.threads.scheduling.yield_cooperative: kernel.threads.scheduling.yield_cooperative
kernel.timers.timer: kernel.timers.timer
kernel.timing.pending: kernel.timing.pending
kernel.timing.sleep: kernel.timing.sleep
kernel.workqueue.delayed: kernel.workqueue.delayed
kernel.workqueue.delayed_cancel: kernel.workqueue.delayed_cancel
kernel.workqueue.delayed_resubmit: kernel.workqueue.delayed_resubmit
kernel.workqueue.delayed_resubmit_thread: kernel.workqueue.delayed_resubmit_thread
kernel.workqueue.poll.delayed: kernel.workqueue.poll.delayed
kernel.workqueue.poll.delayed_cancel: kernel.workqueue.poll.delayed_cancel
kernel.workqueue.poll.delayed_resubmit: kernel.workqueue.poll.delayed_resubmit
kernel.workqueue.poll.delayed_resubmit_thread: kernel.workqueue.poll.delayed_resubmit_thread
kernel.workqueue.poll.resubmit: kernel.workqueue.poll.resubmit
kernel.workqueue.poll.sequence: kernel.workqueue.poll.sequence
kernel.workqueue.resubmit: kernel.workqueue.resubmit
kernel.workqueue.sequence: kernel.workqueue.sequence
libraries.encoding.json.json_decoding: libraries.encoding.json.json_decoding
libraries.encoding.json.json_encoding: libraries.encoding.json.json_encoding
libraries.encoding.json.json_escape: libraries.encoding.json.json_escape
libraries.encoding.json.json_escape_bounds_check: libraries.encoding.json.json_escape_bounds_check
libraries.encoding.json.json_escape_empty: libraries.encoding.json.json_escape_empty
libraries.encoding.json.json_escape_no_op: libraries.encoding.json.json_escape_no_op
libraries.encoding.json.json_escape_one: libraries.encoding.json.json_escape_one
libraries.encoding.json.json_invalid_unicode: libraries.encoding.json.json_invalid_unicode
libraries.encoding.json.json_item_wrong_type: libraries.encoding.json.json_item_wrong_type
libraries.encoding.json.json_key_not_in_descr: libraries.encoding.json.json_key_not_in_descr
libraries.encoding.json.json_missing_quote: libraries.encoding.json.json_missing_quote
libraries.encoding.json.json_obj_arr_decoding: libraries.encoding.json.json_obj_arr_decoding
libraries.encoding.json.json_obj_arr_encoding: libraries.encoding.json.json_obj_arr_encoding
libraries.encoding.json.json_wrong_token: libraries.encoding.json.json_wrong_token
libraries.libc.limits: libraries.libc.limits
libraries.libc.memcmp: libraries.libc.memcmp
libraries.libc.memset: libraries.libc.memset
test context and thread APIs: kernel.context.context
test queue get fail: kernel.queue.queue_get_fail
verify k_poll() that has to wait: kernel.poll.poll_wait
verify k_poll() without waiting: kernel.poll.poll_no_wait
verify multiple pollers: kernel.poll.poll_multi
